#ifndef LIST_H
#define LIST_H

#include <iostream>
#include <cstdlib>

struct Node{
	int _value;
	Node *_next;
};

struct List{
	Node *_head;
	int _size;

	List();
	void insert(int value);
	void remove(int value);
	void print();
	void clearList();
	int removeFirst();
	int indexOf(int value);
};


List::List(){
	_size = 0;
	_head = NULL;
}

void List::insert(int value){
    Node *node = new Node();
	node->_value = value;
	node->_next = _head;
	_head = node;
	_size++;
}

void List::clearList() {
	Node *prev, *curnt;
    curnt = _head;
    for (int j = 0; j < _size; j++) {
        prev = curnt;
        curnt = curnt->_next;
        delete prev;
        if (curnt == NULL) {
            break;
        }
    }
    return;
}

void List::print(){
	Node* head = _head;
	int i;
	if (_size == 0){
	        std::cout << "-";
	    }
	for(i=0; i<_size; i++) {
	    std::cout << head->_value << " ";
	    head = head->_next;
	}
}

int List::removeFirst(){
    if (_size > 0) {
        Node* current = _head;
	    _head = _head->_next;
	    delete current;
	    _size--;
    }
	return 0;
}

int List::indexOf(int value){
	if (_size > 0){
		Node* head = _head;
		int index = 0;
		while(head && head->_value != value){
			index++;
			head = head->_next;
		}
		if (head->_value == value)
			return index; 
		return -1;
	}
	else{
		return -1;
	}
}

void List::remove(int value){
	if(_size == 0){
		return;
	}
	else if(_head->_value == value){
		Node* current = _head;
		_head = _head->_next;
		delete current;
	}
	else{
		Node* previous = _head;
		Node* current = _head->_next;
		while(current != NULL) {
			if(current->_value == value) {
				break;
			}
			else {
				previous = current;
				current = current->_next;
			}
		}
		if(current == NULL) {
			return;
		}
		else {
			previous->_next = current->_next;
			delete current;
		}
	}
	_size--;
}

int main(){
    int i, N, K;
    std::cin >> N >> K;
    
    List *L = new List();
    
    for(i=0; i<=N; i++) {
         L->insert(i);
    }
    
    L->print();
    std::cout << std::endl;
    std::cout << L->_size << std::endl;
    
    for(i=0; i<K; i++) {
        L->removeFirst();
    }
    
    L->print();
    std::cout << std::endl;
    std::cout << L->_size << std::endl;
    
    Node* current = L->_head;
    int tam = L->_size;
    for(i=0; i<tam; i++) {
        if(current->_value % 2 == 0) {
            L->remove(current->_value);
        }  
        current = current->_next;
        
    }
    
    L->print();
    std::cout << std::endl;
    std::cout << L->_size << std::endl;

    L->clearList();
    
    delete L;
	return 0;
}
